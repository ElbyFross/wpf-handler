<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UniformDataOperator</name>
    </assembly>
    <members>
        <member name="T:UniformDataOperator.Binary.BinaryHandler">
            <summary>
            Provide API to working with binary files.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Binary.BinaryHandler.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Occurs when assebly access is failed.
            </summary>
            <param name="sender">Object that initiate that event.</param>
            <param name="args">Data about target requested assebly.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BinaryHandler.ToByteArray(System.Object)">
            <summary>
            Convert object to bytes array.
            </summary>
            <param name="obj">Object for serialization.</param>
            <returns>Binary data</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BinaryHandler.FromByteArray``1(System.Byte[])">
            <summary>
            Convert bytes array to object.
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <param name="data">Binary data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BinaryHandler.FromByteArray(System.Byte[])">
            <summary>
            Convert bytes array to object.
            </summary>
            <param name="data">Binary data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:UniformDataOperator.Binary.BoyerMoore">
            <summary>
            Implement algorithm of Boyer-Moore for searching of binary parts.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Binary.BoyerMoore.IndexOf(System.String,System.String)">
            <summary> 
            Returns the index within this string of the first occurrence of the
            specified substring.If it is not a substring, return -1.
            </summary>
            <param name="data">Binary array that would be source for search.</param>
            <param name="fragment">Binary fragment that would be looked into data array.</param>
            <returns>Index of fragment start. -1 if no found.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BoyerMoore.IndexOf(System.Byte[],System.Byte[])">
            <summary> 
            Returns the index within this string of the first occurrence of the
            specified substring.If it is not a substring, return -1.
            </summary>
            <param name="data">Binary array that would be source for search.</param>
            <param name="fragment">Binary fragment that would be looked into data array.</param>
            <returns>Index of fragment start. -1 if no found.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BoyerMoore.MakeCharTable(System.Byte[])">
            <summary>
            Makes the jump table based on the mismatched character information.
            </summary>
            <param name="fragment">Target binry fragment to search.</param>
            <returns>Char table.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BoyerMoore.MakeOffsetTable(System.Byte[])">
            <summary>
            Makes the jump table based on the scan offset which mismatch occurs.
            </summary>
            <param name="fragment">Target binry fragment to search.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BoyerMoore.IsPrefix(System.Byte[],System.Int32)">
            <summary>
            Is fragment[p:end] a prefix of fragment?
            </summary>
            <param name="fragment">Target binry fragment to search.</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Binary.BoyerMoore.SuffixLength(System.Byte[],System.Int32)">
            <summary>
            Returns the maximum length of the substring ends at p and is a suffix.
            </summary>
            <param name="fragment">Target binry fragment to search.</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:UniformDataOperator.Binary.IO.StreamChanelMode">
            <summary>
            Defines what a type of stream chanel.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Binary.IO.StreamChanelMode.Duplex">
            <summary>
            Server will wait for confirming of data receiving from client.
            Has advantage in case of small packages (about 8kb). 
            Can take more time for precoessing in case if package is 64kb or higher.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Binary.IO.StreamChanelMode.Oneway">
            <summary>
            Server wait declared count of spins.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Binary.IO.StreamHandler">
            <summary>
            Class that provides way to operating binary data streams.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Binary.IO.StreamHandler.HEADER_SIZE">
            <summary>
            Size of package's header in bytes.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Binary.IO.StreamHandler.OneWaySpinsPause">
            <summary>
            How many spins package builder will wait before manage next package.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Binary.IO.StreamHandler.MilisecondsBeforeDrop">
            <summary>
            How many miliseconds would wait stream server before drop connection as failed.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamWriterAsync(System.IO.Pipes.PipeStream,System.Byte[])">
            <summary>
            Writing asynchronicly binary data to stream.
            </summary>
            <param name="stream">Target stream.</param>
            <param name="data">Binary data that would be sent to stream.</param>
            <returns>Asynchronous operation of data writing.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamWriterAsync(System.IO.Pipes.PipeStream,System.Object)">
            <summary>
            Writing asynchronicly binary data to stream.
            </summary>
            <param name="stream">Target stream.</param>
            <param name="nonBinaryData">Non binary object that would be shared via stream.</param>
            <returns>Asynchronous operation of data writing.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamWriterAsync(System.IO.Stream,UniformDataOperator.Binary.IO.StreamChanelMode,System.Byte[],System.Int32)">
            <summary>
            Writing asynchronicly binary data to stream.
            </summary>
            <param name="stream">Target stream.</param>
            <param name="mode">
            Defines mode of package building. 
            In case of Duplex streaming would droped if @MilisecondsBeforeDrop timeout passed without client's confirmation.
            </param>
            <param name="data">Binary data that would be sent to stream.</param>
            <param name="dataBlockSize">Size of block in bytes that would be send to stream per each flush.</param>
            <returns>Asynchronous operation of data writing.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamWriterAsync(System.IO.Pipes.PipeStream,UniformDataOperator.Binary.IO.StreamChanelMode,System.Byte[],System.Int32)">
            <summary>
            Writing asynchronicly binary data to stream.
            </summary>
            <param name="stream">Target stream.</param>
            <param name="mode">
            Defines mode of package building. 
            In case of Duplex streaming would droped if @MilisecondsBeforeDrop timeout passed without client's confirmation.
            </param>
            <param name="data">Binary data that would be sent to stream.</param>
            <param name="dataBlockSize">Size of block in bytes that would be send to stream per each flush.</param>
            <returns>Asynchronous operation of data writing.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.WaitPackageReceiving(System.IO.Stream,UniformDataOperator.Binary.IO.StreamChanelMode)">
            <summary>
            Whaiting for previous package receiving by client.
            </summary>
            <param name="stream">Stream to client.</param>
            <param name="mode">Mode of stram managing.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.ComputeRequiredPackages(System.Int32,System.Int32)">
            <summary>
            Computing count of packages required to data transmission.
            </summary>
            <param name="blockSize">Size of one transmission package.</param>
            <param name="dataBytes">Linght of data to sharing in bytes.</param>
            <returns>Count of required packages.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.BuildPackage(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[]@)">
            <summary>
            Building data package by index.
            </summary>
            <param name="index">Index of data block.</param>
            <param name="headerIndex">Index that would be used as header to determine is a data block received.</param>
            <param name="blockSize">Size of block including header.</param>
            <param name="source">Binary data devided on packages.</param>
            <param name="package">Builded binaty package.</param>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamReaderAsync(System.IO.Pipes.PipeStream)">
            <summary>
            Asynchronous reading formated data from stream.
            </summary>
            <param name="stream">Target stream.</param>
            <returns>Readed binary data.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamReaderAsync``1(System.IO.Pipes.PipeStream)">
            <summary>
            Asynchronous reading formated data from stream.
            </summary>
            <typeparam name="T">Type of data after binary decoding.</typeparam>
            <param name="stream">Target stream.</param>
            <returns>Readed binary data.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.StreamReaderAsync(System.IO.Stream)">
            <summary>
            Asynchronous reading formated data from stream.
            </summary>
            <param name="stream">Target stream.</param>
            <returns>Readed binary data.</returns>
        </member>
        <member name="M:UniformDataOperator.Binary.IO.StreamHandler.InformAboutReceving(UniformDataOperator.Binary.IO.StreamChanelMode,System.IO.Stream)">
            <summary>
            Informing server about receiving message by client.
            </summary>
            <param name="mode">Server mode that decide reaction.</param>
            <param name="stream">Target to server stream.</param>
        </member>
        <member name="T:UniformDataOperator.Modifiers.IBaseTypeChangable">
            <summary>
            Inmplementing of that interface allow to redefine type that will be used in internal class\structure operations. 
            </summary>
        </member>
        <member name="P:UniformDataOperator.Modifiers.IBaseTypeChangable.OperatingType">
            <summary>
            Type that will be used in operations.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Modifiers.TypeReplacer">
            <summary>
            Defining of that attribute automaticly add type to
            </summary>
        </member>
        <member name="F:UniformDataOperator.Modifiers.TypeReplacer.replacingType">
            <summary>
            Type that will be added to exlusion table and replaced by using type.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Modifiers.TypeReplacer.usingType">
            <summary>
            Type that will be used by everyone who ask exlusion table about.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Modifiers.TypeReplacer.overridingPriority">
            <summary>
            Allow to use some modifiers. Excluding table will contains only one with hiest priority.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Modifiers.TypeReplacer.#ctor">
            <summary>
            Basse constructor.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Modifiers.TypeReplacer.#ctor(System.Type,System.Type,System.Int32)">
            <summary>
            Constructor that all to initialise attribute's data via reflected constructor.
            </summary>
            <param name="replacingType">Type that will be added to exlusion table and replaced by using type.</param>
            <param name="usingType">Type that will be used by everyone who ask exlusion table about.</param>
            <param name="overridingPriority">Allow to use some modifiers. Excluding table will contains only one with hiest priority.</param>
        </member>
        <member name="F:UniformDataOperator.Modifiers.TypeReplacer.ExludingTable">
            <summary>
            Table that will contains redefinig instruction for types.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Modifiers.TypeReplacer.ReplacingMeta">
            <summary>
            Meta data building during type replacment registration.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Modifiers.TypeReplacer.ReplacingMeta.usingType">
            <summary>
            Type that must be used instead of requested.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Modifiers.TypeReplacer.ReplacingMeta.replacedWithPriority">
            <summary>
            Priority that was used during type replacement. 
            Allow to override that meta in case in next instruction will has highest priority then that one.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Modifiers.TypeReplacer.GetValidType(System.Type)">
            <summary>
            Returns type that must be eused instead of base type.
            </summary>
            <param name="baseType">Type that will be checked into excluding table.</param>
            <returns>Forwarder type defined into exluding table, or self in case in type not replaced.</returns>
        </member>
        <member name="M:UniformDataOperator.Modifiers.TypeReplacer.OperateType(System.Type)">
            <summary>
            Operating type to define if it must be registred in internal systems.
            </summary>
            <param name="type">Type that could contain defined `TypeReplacing` attribute.</param>
        </member>
        <member name="M:UniformDataOperator.Modifiers.TypeReplacer.IsReplaced(System.Type)">
            <summary>
            Checking does that type was replaced.
            </summary>
            <param name="type">Type that will chached into exluding table.</param>
            <returns>Result of check. True if type was replaced.</returns>
        </member>
        <member name="M:UniformDataOperator.Modifiers.TypeReplacer.RescanAssemblies">
            <summary>
            Scaning assemblies in current app domaint to find out all types with defined replacing attribute.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.ISqlOperator">
            <summary>
            Implement that interface to provide possiblity to controll your data base by using SQL queryes.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.ISqlOperator.Server">
            <summary>
            Server's ip.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.ISqlOperator.Port">
            <summary>
            Port for server access.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.ISqlOperator.Database">
            <summary>
            Database's name.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.ISqlOperator.UserId">
            <summary>
            User for connection.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.ISqlOperator.Password">
            <summary>
            User's password.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.ISqlOperator.Connection">
            <summary>
            Connection to DB.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.Initialize">
            <summary>
            Initialize operator.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.NewCommand">
            <summary>
            Return new clear command suitable for current DB.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.NewCommand(System.String)">
            <summary>
            Return new clear command suitable for current DB with included command text.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.MemberToParameter(System.Object,UniformDataOperator.Sql.Attributes.Column)">
            <summary>
            Convert value of member to data base parameter that can be used in command.
            </summary>
            <param name="data">Value of the object that would applied to parameter.</param>
            <param name="column">Column attribute relative to member of data.</param>
            <returns>Parameter that could by used in commands to data base.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.DisableSqlChecks(System.Data.Common.DbCommand)">
            <summary>
            Add code that disabling SQL checks during executing command.
            </summary>
            <param name="command">Target command that would be modified during operation.</param>
            <returns>Modified comand.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.DisableSqlChecks(System.String)">
            <summary>
            Add code that disabling SQL checks during executing command.
            </summary>
            <param name="command">Target command that would be modified during operation.</param>
            <returns>Modified comand.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.DbTypeToString(System.Data.DbType)">
            <summary>
            Trying to convert DBType to specified type in string format that suitable to this database.
            </summary>
            <param name="type">Common DBType.</param>
            <returns>Type suitable for SQL command relative to this type of data base. 
            InvalidCastException in case if converting not possible.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.ValidateTableMember(UniformDataOperator.Sql.Attributes.Table,System.Reflection.MemberInfo)">
            <summary>
            Validate data base table column acording to member attributes.
            </summary>
            <param name="tableDescriptor">Table meta data.</param>
            <param name="columnMember">Member with defined Column attribute that would be comared with </param>
            <returns>Result of validation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.OpenConnection(System.String@)">
            <summary>
            Opening connection to SQL server.
            </summary>
            <param name="error">Faced error. Null if passed success.</param>
            <returns>Result of connection.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.CloseConnection">
            <summary>
            Closing connection to SQL server.
            </summary>
            <returns>Result of connection closing.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.Backup(System.String)">
            <summary>
            Backuping data base to sql file in directory.
            Name would be generated by timestamp.
            </summary>
            <param name="directory">Directory that would store the backup file.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.Restore(System.String)">
            <summary>
            Restoring SQL db from file.
            </summary>
            <param name="filePath">Full path to file</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.ActivateSchema(System.String,System.String@)">
            <summary>
            Trying to set schema to databases server in case if schema not exist.
            </summary>
            <param name="schemaName">Name of the schema that would be used\created.</param>
            <param name="error">Error faces during operation.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.ColumnDeclarationCommand(System.Reflection.MemberInfo)">
            <summary>
            Return generated SQL command relative to init time.
            </summary>
            <param name="member">Member that contains defined attributes that describes column definition.</param>
            <returns>SQL command relative to target server.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToTable(System.Type,System.Object,System.String@)">
            <summary>
            Creating request that setting up data from object to data base server acording to attributes.
            </summary>
            <param name="tableType">Type that has defined Table attribute.
            Would be used as table descriptor during query building.</param>
            <param name="data">Object that contains fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToTableAsync(System.Type,System.Threading.CancellationToken,System.Object)">
            <summary>
            Creating request that setting up data from object to data base server acording to attributes.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="data">Object that contains fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObject(System.Type,System.Object,System.String@,System.String[],System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="error">Error faces during operation.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <param name="where">List of requested columns that would included to `WHERE` part of SQL query.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObject(System.Type,System.Object,System.String@,System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute.
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="error">Error faces during operation.</param>
            <param name="selsect">List of requested columns that would included to SQL query.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObject(System.Type,System.Object,System.String@)">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute.
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjects(System.Type,System.Object,System.Collections.IList@,System.String@,System.String[],System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.
            After operation would contains recived object.</param>
            <param name="collection">Output collection that would contains recived object with the same Type like obj.</param>
            <param name="error">Error faces during operation.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <param name="where">List of requested columns that would included to `WHERE` part of SQL query.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjects(System.Type,System.Object,System.Collections.IList@,System.String@,System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.
            After operation would contains recived object.</param>
            <param name="collection">Output collection that would contains recived object with the same Type like obj.</param>
            <param name="error">Error faces during operation.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjects(System.Type,System.Object,System.Collections.IList@,System.String@)">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.
            After operation would contains recived object.</param>
            <param name="collection">Output collection that would contains recived object with the same Type like obj.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjectAsync(System.Type,System.Threading.CancellationToken,System.Object,System.String[],System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.
            After operation would contains recived object.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <param name="where">List of requested columns that would included to `WHERE` part of SQL query.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjectAsync(System.Type,System.Threading.CancellationToken,System.Object,System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.
            After operation would contains recived object.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjectAsync(System.Type,System.Threading.CancellationToken,System.Object)">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.
            After operation would contains recived object.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjectsAsync(System.Type,System.Threading.CancellationToken,System.Object,System.Action{System.Collections.IList},System.String[],System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="callback">Delegate that would be called and return retcived collection of objects.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <param name="where">List of requested columns that would included to `WHERE` part of SQL query.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjectsAsync(System.Type,System.Threading.CancellationToken,System.Object,System.Action{System.Collections.IList},System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="callback">Delegate that would be called and return retcived collection of objects.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.ISqlOperator.SetToObjectsAsync(System.Type,System.Threading.CancellationToken,System.Object,System.Action{System.Collections.IList})">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="callback">Delegate that would be called and return retcived collection of objects.</param>
        </member>
        <member name="T:UniformDataOperator.Sql.MySql.Attributes.MySqlDBTypeOverride">
            <summary>
            Attribute that can be defined to override standard DBType defined in Column attribute, for columns that would created in MySql tables.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.MySql.Attributes.MySqlDBTypeOverride.type">
            <summary>
            Type relative to MySql params.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.MySql.Attributes.MySqlDBTypeOverride.stringFormat">
            <summary>
            Type in string format that would be used during column declaration.
            Example: VARCHAR(45), BLOB(4196)
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.Attributes.MySqlDBTypeOverride.#ctor(MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            Overriding standard type's definition of column and specifiy it for MySql databases.
            
            Warning: unsafe method, cause just converts type to string to receive stringFormat value. 
            Acceptable only for types that hasn't params. 
            TINYBLOB as example.
            </summary>
            <param name="type">Type relative to MySql params.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.Attributes.MySqlDBTypeOverride.#ctor(MySql.Data.MySqlClient.MySqlDbType,System.String)">
            <summary>
            Overriding standard type's definition of column and specifiy it for MySql databases.
            </summary>
            <param name="type">Type relative to MySql params.</param>
            <param name="stringFormat">Type in string format that would be used during column declaration.
            Example: VARCHAR(45), BLOB(4196)</param>
        </member>
        <member name="T:UniformDataOperator.Sql.MySql.MySqlDataOperator">
            <summary>
            Operator that provides possibility to operate data on MySQL data base server.
            </summary>
            <summary>
            Operator that provides possibility to operate data on MySQL data base server.
            </summary>
            <summary>
            Operator that provides possibility to operate data on MySQL data base server.
            </summary>
            <summary>
            Operator that provides possibility to operate data on MySQL data base server.
            </summary>
            <summary>
            Operator that provides possibility to operate data on MySQL data base server.
            </summary>
            <summary>
            Operator that provides possibility to operate data on MySQL data base server.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObject(System.Type,System.Object,System.String@,System.String[],System.String[])">
            <summary>
            Trying to set object data to database.
            </summary>
            <param name="tableType">Type with defined Table attribute. 
            Contains columns\properties with defined column attributes. Using as map for collecting data.</param>
            <param name="obj">Instance that contains data tha with the same column sttributes as in tableType.</param>
            <param name="error">Occurred error. Null if operation passed success.</param>
            <param name="select">Array that contains columns' names that would be requested in select block.
            If empty then would auto select all columns.</param>
            <param name="where">Array that contains columns' names taht wouyld be added to Where block.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObject(System.Type,System.Object,System.String@,System.String[])">
            <summary>
            Trying to set object data to database.
            Automaticly build where block with primary keys.
            </summary>
            <param name="tableType">Type with defined Table attribute. 
            Contains columns\properties with defined column attributes. Using as map for collecting data.</param>
            <param name="obj">Instance that contains data tha with the same column sttributes as in tableType.</param>
            <param name="error">Occurred error. Null if operation passed success.</param>
            <param name="select">Array that contains columns' names that would be requested in select block.
            If empty then would auto select all columns.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObject(System.Type,System.Object,System.String@)">
            <summary>
            Trying to set object data to database.
            Automaticly build where block with primary keys.
            Select all available columns.
            </summary>
            <param name="tableType">Type with defined Table attribute. 
            Contains columns\properties with defined column attributes. Using as map for collecting data.</param>
            <param name="obj">Instance that contains data tha with the same column sttributes as in tableType.</param>
            <param name="error">Occurred error. Null if operation passed success.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjects(System.Type,System.Object,System.Collections.IList@,System.String@,System.String[],System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="collection">Output collection that would contains recived object with the same Type like obj.</param>
            <param name="error">Error faces during operation.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <param name="where">List of requested columns that would included to `WHERE` part of SQL query.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjects(System.Type,System.Object,System.Collections.IList@,System.String@,System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="collection">Output collection that would contains recived object with the same Type like obj.</param>
            <param name="error">Error faces during operation.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjects(System.Type,System.Object,System.Collections.IList@,System.String@)">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="collection">Output collection that would contains recived object with the same Type like obj.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjectAsync(System.Type,System.Threading.CancellationToken,System.Object,System.String[],System.String[])">
            <summary>
            Trying to set object data to database.
            
            Ocurred error can be recived via subscribtion on SqlOperatorHandler.SqlErrorOccured event;
            </summary>
            <param name="tableType">Type with defined Table attribute. 
            Contains columns\properties with defined column attributes. Using as map for collecting data.</param>
            <param name="cancellationToken">Token that will terminate operation if would be required.</param>
            <param name="obj">Instance that contains data tha with the same column sttributes as in tableType.</param>
            <param name="select">Array that contains columns' names that would be requested in select block.
            If empty then would auto select all columns.</param>
            <param name="where">Array that contains columns' names taht wouyld be added to Where block.</param>
            <returns>Awaitable task.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjectAsync(System.Type,System.Threading.CancellationToken,System.Object,System.String[])">
            <summary>
            Trying to set object data to database.
            
            Ocurred error can be recived via subscribtion on SqlOperatorHandler.SqlErrorOccured event;
            </summary>
            <param name="tableType">Type with defined Table attribute. 
            Contains columns\properties with defined column attributes. Using as map for collecting data.</param>
            <param name="cancellationToken">Token that will terminate operation if would be required.</param>
            <param name="obj">Instance that contains data tha with the same column sttributes as in tableType.</param>
            <param name="select">Array that contains columns' names that would be requested in select block.
            If empty then would auto select all columns.</param>
            <returns>Awaitable task.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjectAsync(System.Type,System.Threading.CancellationToken,System.Object)">
            <summary>
            Trying to set object data to database.
            
            Ocurred error can be recived via subscribtion on SqlOperatorHandler.SqlErrorOccured event;
            </summary>
            <param name="tableType">Type with defined Table attribute. 
            Contains columns\properties with defined column attributes. Using as map for collecting data.</param>
            <param name="cancellationToken">Token that will terminate operation if would be required.</param>
            <param name="obj">Instance that contains data tha with the same column sttributes as in tableType.</param>
            <returns>Awaitable task.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjectsAsync(System.Type,System.Threading.CancellationToken,System.Object,System.Action{System.Collections.IList},System.String[],System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="callback">Delegate that would be called and return retcived collection of objects.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
            <param name="where">List of requested columns that would included to `WHERE` part of SQL query.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjectsAsync(System.Type,System.Threading.CancellationToken,System.Object,System.Action{System.Collections.IList},System.String[])">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="callback">Delegate that would be called and return retcived collection of objects.</param>
            <param name="select">List of requested columns that would included to SQL query.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToObjectsAsync(System.Type,System.Threading.CancellationToken,System.Object,System.Action{System.Collections.IList})">
            <summary>
            Setting data from DB Data reader to object by using column map described at object Type.
            Auto-generate SQL query and request coluns data relative to privary keys described in object.
            
            Add to WHERE block only requested columns.
            Request data only for required columns.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="callback">Delegate that would be called and return retcived collection of objects.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.ValidateEntryRD(System.Type,System.Object,System.String@)">
            <summary>
            Validate entry data for read query.
            </summary>
            <param name="tableType">Type that has defined Table attribute.</param>
            <param name="obj">Entry object/</param>
            <param name="error">Possible error. Null if success.</param>
            <returns>Result of validation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.MembersAllowedToSet(System.Type,System.Object,System.String@)">
            <summary>
            Detect common collection of members that can be included to query.
            </summary>
            <param name="tableType">Type that has defined Table attribute.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="error">Error faces during operation.</param>
            <returns>List with members that valid to using in set queries.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.GenerateSetToObjectCommand(System.Type,System.Object,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Trying to generate command that would request objects members from server.
            </summary>
            <param name="tableType">Type that has defined Table attribute.</param>
            <param name="obj">Target object that cantains described primary keys, 
            that would be used during query generation.</param>
            <param name="where">Collection that contains membewrs that need to be included 
            to WHERE Sql block of SELECT query.</param>
            <param name="select">Collection that contains membewrs that need to be included 
            to SELECT Sql block of SELECT query. If empty then would be auto changed to *</param>
            <returns>Generated command suitable for current `Active` SQL server.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.DetectPKToSet(System.Type,System.String@,System.String[]@)">
            <summary>
            Looking for primary keys in table and build them names to array.
            </summary>
            <param name="tableType">Type that describe table.</param>
            <param name="error">Error if occured. Null if operation success.</param>
            <param name="pksArray">Output arrey that contains names of PK columns.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.Initialize">
            <summary>
            Initialize MySqlConnection.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.NewCommand">
            <summary>
            Return new clear command suitable for current DB.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.NewCommand(System.String)">
            <summary>
            Return new clear command suitable for current DB with included command text.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.DisableSqlChecks(System.Data.Common.DbCommand)">
            <summary>
            Add code that disabling SQL checks during executing command.
            </summary>
            <param name="command">Target command that would be modified during operation.</param>
            <returns>Modified comand.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.DisableSqlChecks(System.String)">
            <summary>
            Add code that disabling SQL checks during executing command.
            </summary>
            <param name="command">Target command that would be modified during operation.</param>
            <returns>Modified comand.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.ValidateTableMember(UniformDataOperator.Sql.Attributes.Table,System.Reflection.MemberInfo)">
            <summary>
            Validate data base table column acording to member attributes.
            </summary>
            <param name="tableDescriptor">Table meta data.</param>
            <param name="columnMember">Member with defined Column attribute that would be comared with </param>
            <returns>Result of validation.</returns>W
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.MemberToParameter(System.Object,UniformDataOperator.Sql.Attributes.Column)">
            <summary>
            Convert value of member to data base parameter that can be used in command.
            </summary>
            <param name="data">Value of the object that would applied to parameter.</param>
            <param name="column">Column attribute relative to member of data.</param>
            <returns>Parameter that could by used in commands to data base.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.DbTypeToString(System.Data.DbType)">
            <summary>
            Trying to convert DBType to specified type in string format that suitable to this database.
            </summary>
            <param name="type">Common DBType.</param>
            <returns>Type suitable for SQL command relative to this type of data base. 
            InvalidCastException in case if converting not possible.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.OpenConnection(System.String@)">
            <summary>
            Opening connection to SQL server.
            </summary>
            <param name="error">Faced error. Null if passed success.</param>
            <returns>Result of connection.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.CloseConnection">
            <summary>
            Closing connection to SQL server.
            </summary>
            <returns>Result of connection closing.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.Backup(System.String)">
            <summary>
            Backuping data base to sql file in directory.
            Name would be generated by timestamp.
            </summary>
            <param name="directory">Directory that would store the backup file.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.Restore(System.String)">
            <summary>
            Restoring SQL db from file.
            </summary>
            <param name="filePath">Full path to file</param>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.Active">
            <summary>
            Active single tone instance of MySQL data provider.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.Server">
            <summary>
            Server's ip.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.Port">
            <summary>
            Port for server access.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.Database">
            <summary>
            Database's name.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.UserId">
            <summary>
            User for connection.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.Password">
            <summary>
            User's password.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.MySql.MySqlDataOperator.Connection">
            <summary>
            Connection to DB.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.MySql.MySqlDataOperator.connection">
            <summary>
            Object that managing connection with DB.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.ActivateSchema(System.String,System.String@)">
            <summary>
            Trying to set schema to databases server in case if schema not exist.
            </summary>
            <param name="schemaName">Name of the schema that would be used\created.</param>
            <param name="error">Error faces during operation.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.ColumnDeclarationCommand(System.Reflection.MemberInfo)">
            <summary>
            Return generated SQL command relative to init time.
            </summary>
            <param name="member">Member that contains defined attributes that describes column definition.</param>
            <returns>SQL command relative to MySql server.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.GenerateSetToTableCommand(System.Type,System.Object,System.String@)">
            <summary>
            Generating set to table sql command from provided source data.
            </summary>
            <param name="tableType">Type that has defined Table attribute. 
            Would be used as table descriptor during queri building.</param>
            <param name="data">Object that contain's fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Generated command or null if failed.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToTable``1(System.Object,System.String@)">
            <summary>
            Creating request that setting up data from object to data base server acording to attributes.
            </summary>
            <typeparam name="T">Type that has defined Table attribute. Would be used as table descriptor during queri building.</typeparam>
            <param name="data">Object that contain's fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToTable(System.Type,System.Object,System.String@)">
            <summary>
            Creating request that setting up data from object to data base server acording to attributes.
            </summary>
            <param name="tableType">Type that has defined Table attribute. Would be used as table descriptor during queri building.</param>
            <param name="data">Object that contain's fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToTableAsync``1(System.Threading.CancellationToken,System.Object)">
            <summary>
            Creating request that setting up data from object to data base server acording to attributes.
            </summary>
            <typeparam name="T">Type that has defined Table attribute. 
            <param name="cancellationToken">Token that can terminate operation.</param>
            Would be used as table descriptor during queri building.</typeparam>
            <param name="data">Object that contains fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.MySql.MySqlDataOperator.SetToTableAsync(System.Type,System.Threading.CancellationToken,System.Object)">
            <summary>
            Creating request that setting up data from object to data base server acording to attributes.
            </summary>
            <param name="tableType">Type that has defined Table attribute
            Would be used as table descriptor during query building.</param>
            <param name="cancellationToken">Token that can terminate operation.</param>
            <param name="data">Object that contains fields that would be writed to data base. 
            Affected only fields and properties with defined Column attribute.</param>
        </member>
        <member name="T:UniformDataOperator.Sql.SqlOperatorHandler">
            <summary>
            Contains base catalog of uniform queries that strongly simplify managing of the data base.
            </summary>
        </member>
        <member name="E:UniformDataOperator.Sql.SqlOperatorHandler.SqlErrorOccured">
            <summary>
            Event that can be called by operator to share errors during sql commands from async methods.
            </summary>
        </member>
        <member name="P:UniformDataOperator.Sql.SqlOperatorHandler.Active">
            <summary>
            Contains las operator that asing itself to handler as active one.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.SqlOperatorHandler.InvokeSQLErrorOccured(System.Object,System.String)">
            <summary>
            Invoke global error event informing about error occuring.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.SqlOperatorHandler.CollectionToString(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Conver collection view to string order.
            
            Elemets of collection must has overrided ToString() methods.
            </summary>
            <param name="collection">Collection with strings,</param>
            <returns>String in format: "i0, i1, ..., in"</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.SqlOperatorHandler.ConcatFormatedCollections(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Concat to collections in format:
            headers0 = [braket]values0[braket], ..., headersN = [braket]valuesN[braket]
            
            Elemets of collections must has overrided ToString() methods.
            </summary>
            <param name="headers">Header of the value.</param>
            <param name="values">Value acording to header.</param>
            <returns>String that contain collection suitable for SQL commands.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.SqlOperatorHandler.ConcatFormatedCollections(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.Char)">
            <summary>
            Concat to collections in format:
            headers0 = [braket]values0[braket], ..., headersN = [braket]valuesN[braket]
            
            Elemets of collections must has overrided ToString() methods.
            </summary>
            <param name="headers">Header of the value.</param>
            <param name="values">Value acording to header.</param>
            <param name="bracketsSymbol">Symbol that will has been using to clamp value.</param>
            <returns>String that contain collection suitable for SQL commands.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.SqlOperatorHandler.DatabaseDataToObject(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Object,System.String@)">
            <summary>
            Trying to apply data base data to object by members map.
            </summary>
            <param name="reader">Data base data reader that contains data recived from server.</param>
            <param name="members">Map of members that would be lokking in reader.</param>
            <param name="obj">Target object that would contain output data.</param>
            <param name="error">Error occured during operation. Null if operation is success.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.SqlOperatorHandler.RescanDatabaseStructure">
            <summary>
            Scaning assemblies and looking for classes and structures with defined <see cref="T:UniformDataOperator.Sql.Attributes.Table"/> attribute.
            Trying to create shemas and tables via <see cref="P:UniformDataOperator.Sql.SqlOperatorHandler.Active"/>.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.Default">
            <summary>
            Add default valu to the field.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Default.defExp">
            <summary>
            Default or Expression value.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Default.#ctor(System.String)">
            <summary>
            Init default value.
            </summary>
            <param name="defExp">Default or Expression value.</param>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.Modifiers.SetQueryIgnore">
            <summary>
            Can be defined to ignore of writing this value during set-like queries to server.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride">
            <summary>
            Overriding data base path to member in attributes that looking for this attribute.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.targetAttribute">
            <summary>
            Type of attribute that would be affected by this overriding.
            If null that overriding would be applied to  all who looking for.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.schema">
            <summary>
            Name of schema that would be used during mentoing of this member in queries if possible.
            Will be skiped if null.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.table">
            <summary>
            Name of table that would be used during mentoing of this member in queries if possible.
            Will be skiped if null.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.column">
            <summary>
            Name of column that would be used during mentoing of this member in queries if possible.
            Will be skiped if null.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.#ctor">
            <summary>
            Base constructor.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Constructors that allow to initialize fields via reflected methods.
            </summary>
            <param name="schema"></param>
            <param name="table"></param>
            <param name="column"></param>
            <param name="targetAttribute"></param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride.TryToGetValidOverride``1(System.Reflection.MemberInfo,UniformDataOperator.Sql.Attributes.Modifiers.DBPathOverride@)">
            <summary>
            Looking for path overriding attribute suitable for specified member and assking attribute.
            </summary>
            <typeparam name="T">Attribute that would be locked as an overriding target</typeparam>
            <param name="member">Member that could contains attribute.</param>
            <param name="output">Suitable override attribute.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.Table">
            <summary>
            Attribute that would force to automatic generation of table on your SQL server suitable for declered members in class or structure.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Table.schema">
            <summary>
            Name of the holding schema.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Table.table">
            <summary>
            Name of the table.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Table.engine">
            <summary>
            Name of the database engine.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.#ctor(System.String,System.String)">
            <summary>
            Configurate SQL table.
            </summary>
            <param name="schema">Name of foreign schema.</param>
            <param name="table">Name of foreign table.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.#ctor(System.String,System.String,System.String)">
            <summary>
            Configurate SQL table.
            </summary>
            <param name="schema">Name of foreign schema.</param>
            <param name="table">Name of foreign table.</param>
            <param name="engine">Name of the database engine.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.GenerateCreateTableCommand(System.Type)">
            <summary>
            Return command that would allow to create table by descriptor.
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.TrySetTables(System.Boolean,System.String@,System.Type[])">
            <summary>
            Trying to set some tables to SQL server.
            Existed ones would be skiped.
            Not updating alter columns.
            </summary>
            <param name="disableSQLChecks">Disable check of data itegrity during command.</param>
            <param name="error">Error cased during operation. Null if al passed without exceptions.</param>
            <param name="tableDescriptors">Types with defined "Table" attribute.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.TrySetTable(System.Boolean,System.Type,System.String@)">
            <summary>
            Trying to set table if required.
            Not updating alter columns.
            </summary>
            <param name="disableSQLChecks">Disable check of data itegrity during command.</param>
            <param name="tableDescriptor">Type that would be trying to recreate on your SQL server. 
            Must has defined UniformDataOperator.Sql.Attributes.Table attribute.</param>
            <param name="error">Error faces during operation.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.FindMembersByColumns(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.String[])">
            <summary>
            Looking for members that's column's titles included to array.
            </summary>
            <param name="members">List of members that will be used for columns search.</param>
            <param name="columnTitles">Array that contais column's titles that would be looking among members.</param>
            <returns>List with suitable members.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Table.TryToGetTableAttribute(System.Type,UniformDataOperator.Sql.Attributes.Table@,System.String@)">
            <summary>
            Looking for valid Table attribute. Chack all overridings and return correct descriptor.
            </summary>
            <param name="tableType">Type that contains defined Table attribute.</param>
            <param name="tableDescriptor">Output table descriptor.</param>
            <param name="error">Error message in cvase if occured. Null in other case.</param>
            <returns></returns>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.Commentary">
            <summary>
            Add commentary to SQL table.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Commentary.commentary">
            <summary>
            Commentary to the column.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Commentary.#ctor(System.String)">
            <summary>
            Init commentary for column in table.
            </summary>
            <param name="commentary">Commentary to the column.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Commentary.ToString">
            <summary>
            Return comment in string format.
            </summary>
            <returns>Comment in string format.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Commentary.op_Implicit(UniformDataOperator.Sql.Attributes.Commentary)~System.String">
            <summary>
            Return comment in string format.
            </summary>
            <param name="commentary">Input comment.</param>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsGenerated">
            <summary>
            Mark field as generated.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsGenerated.Mode">
            <summary>
            Modes of generated columns.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsGenerated.Mode.Stored">
            <summary>
            Value computed be expression and stored in data base as value.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsGenerated.Mode.Virual">
            <summary>
            Value would be computed as expression during every call.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsGenerated.mode">
            <summary>
            How to operate with value.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsGenerated.#ctor(UniformDataOperator.Sql.Attributes.IsGenerated.Mode,System.String)">
            <summary>
            Init generated expression.
            </summary>
            <param name="mode">How to operate with value.</param>
            <param name="defExp">Default or Expression value.</param>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsAutoIncrement">
            <summary>
            Is value of this column would incremented relative to previous one during init.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsAutoIncrement.ignoreValue">
            <summary>
            Value that would be marked as default for numeric field.
            Affectable for primary keys that has IsAutoIncrement definition. 
            In case if field\property would contains that alue then interpretator would conclude that value not described and 
            would INSERT table's object as new.
            In other case object would be described in UPDATE command.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsAutoIncrement.#ctor">
            <summary>
            Mark column as auto increament. 
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsAutoIncrement.#ctor(System.Int32)">
            <summary>
            Mark column as auto increament. Describe value that would be ignored by interpretator fro promary keys.
            </summary>
            <param name="ignoreValue">Value that would be marked as default for numeric field.
            Affectable for primary keys that has IsAutoIncrement definition. 
            In case if field\property would contains that alue then interpretator would conclude that value not described and 
            would INSERT table's object as new.
            In other case object would be described in UPDATE command.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsAutoIncrement.GetIgnorable(System.Object@)">
            <summary>
            Trying to find member with defined IsAutoIncrement attribute in collection.
            If found, comparing it's value with ignorable one.
            
            Scaning all members that has defined Column attribute.
            </summary>
            <param name="data">Object that contain member.</param>
            <returns>Return member if value equal defined ignorable. 
            Null if IsAutoIncrement not defined or object has not defaul value.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsAutoIncrement.GetIgnorable(System.Object@,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Trying to find member with defined IsAutoIncrement attribute in collection.
            If found, comparing it's value with ignorable one.
            </summary>
            <param name="data">Object that contain member.</param>
            <param name="members">List of members that would be checked for this object.</param>
            <returns>Return member if value equal defined ignorable. 
            Null if IsAutoIncrement not defined or object has not defaul value.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsAutoIncrement.IsIntLike(System.Type)">
            <summary>
            Cheing does the type is seems like int.
            </summary>
            <param name="type">Type that would be comparet to ints.</param>
            <returns>Result of types commpession.</returns>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsUnsigned">
            <summary>
            Is not have signs after dot.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsBinary">
            <summary>
            Is data would stored in binary format.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsPrimaryKey">
            <summary>
            Is it's primary key.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsZeroFill">
            <summary>
            Is value wold be willed by zero by default. Only for numerical columns.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsUnique">
            <summary>
            Is this value must be unique by this column. 
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsUnique.UniqueIndexDeclarationCommand(System.Reflection.MemberInfo)">
            <summary>
            Return unique index init string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsNotNull">
            <summary>
            Is value always not null.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsForeignKey">
            <summary>
            Mark fireld as foreign key to other column.
            </summary>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.IsForeignKey.Action">
            <summary>
            Action's mode that would be used as reaction on event.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.Action.NoAction">
            <summary>
            Don't do anything.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.Action.Cascade">
            <summary>
            Goins down by member and react all members in relative tables.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.Action.Restrict">
            <summary>
            Don't do anything.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.Action.SetNull">
            <summary>
            Setting null to coulmn value.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.schema">
            <summary>
            Name of foreign schema.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.table">
            <summary>
            Name of foreign table.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.column">
            <summary>
            Name of foreign column.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.onDeleteCommand">
            <summary>
            Command that would be applied in case of deleting.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.IsForeignKey.onUpdateCommand">
            <summary>
            Command that would be applied in case of updating.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Configurate forgeign column reference.
            </summary>
            <param name="schema">Name of foreign schema.</param>
            <param name="table">Name of foreign table.</param>
            <param name="column">Name of foreign column.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.#ctor(System.String,System.String,System.String,UniformDataOperator.Sql.Attributes.IsForeignKey.Action,UniformDataOperator.Sql.Attributes.IsForeignKey.Action)">
            <summary>
            Configurate forgeign column reference.
            </summary>
            <param name="schema">Name of foreign schema.</param>
            <param name="table">Name of foreign table.</param>
            <param name="column">Name of foreign column.</param>
            <param name="onDeleteCommand">Command that would be applied in case of deleting.</param>
            <param name="onUpdateCommand">Command that would be applied in case of updating.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.ActionToCommand(UniformDataOperator.Sql.Attributes.IsForeignKey.Action)">
            <summary>
            Convert action to string format.
            </summary>
            <param name="action">Target action.</param>
            <returns>Command format action.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.FKIndexDeclarationCommand(System.Reflection.MemberInfo,System.String)">
            <summary>
            Return index init string suitable from forgeign key suitable for this column.
            Can auto detect modifers.
            </summary>
            <param name="member">Member that would be used to looking for descriptors.</param>
            <param name="selfTableName">Name of the table that contain column.</param>
            <returns>Return SQL command that wold generate FK index.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.FKIndexDeclarationCommand(UniformDataOperator.Sql.Attributes.Column,UniformDataOperator.Sql.Attributes.IsForeignKey,System.String)">
            <summary>
            Return index init string suitable from forgeign key suitable for this column.
            </summary>
            <param name="column">Column attribute.</param>
            <param name="isForeignKey">FL attribute</param>
            <param name="selfTableName">Name of holding table.</param>
            <returns>Generated SQL command.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.FKName(System.String)">
            <summary>
            Generate fk key name related to this column.
            </summary>
            <param name="selfTableName">Name of the table that contain column.</param>
            <returns>Return FK suitable name</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.DropIndexator">
            <summary>
            Clearing current index history.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.ConstrainDeclarationCommand(UniformDataOperator.Sql.Attributes.Column,UniformDataOperator.Sql.Attributes.IsForeignKey,System.String)">
            <summary>
            Generate init string from contrains related to this column.
            </summary>
            <param name="column">Column attribute.</param>
            <param name="isForeignKey">FK attribute.</param>
            <param name="selfTableName">Name of holding table.</param>
            <returns>Generated SQL command.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.IsForeignKey.ConstrainDeclarationCommand(System.Reflection.MemberInfo,System.String)">
            <summary>
            Generate init string from contrains related to this column.
            Can auto detect modifers.
            </summary>
            <param name="member">Member that would be used to looking for descriptors.</param>
            <param name="selfTableName">Name of holding table.</param>
            <returns>Generated SQL command.</returns>
        </member>
        <member name="T:UniformDataOperator.Sql.Attributes.Column">
            <summary>
            Descriptro of data base table's column.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Column.title">
            <summary>
            Title of column in table.
            </summary>
        </member>
        <member name="F:UniformDataOperator.Sql.Attributes.Column.type">
            <summary>
            Type of column in table.
            </summary>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Column.#ctor(System.String,System.Data.DbType)">
            <summary>
            Init column.
            </summary>
            <param name="title">Title of column in table.</param>
            <param name="type">Type of column in table.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Column.op_Implicit(UniformDataOperator.Sql.Attributes.Column)~System.String">
            <summary>
            Converting column to string view.
            </summary>
            <param name="column">Input column.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Column.ToString">
            <summary>
            Converting column to string view.
            </summary>
            <returns>Tielt of column.</returns>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Column.MembersDataToCommand(System.Object@,System.Data.Common.DbCommand@,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Adding members columns data to params.
            </summary>
            <param name="data">Object that contains values relative to members.</param>
            <param name="command">Command objects that would share values.</param>
            <param name="members">Members that with defined Column attribute that would be stored to command.</param>
        </member>
        <member name="M:UniformDataOperator.Sql.Attributes.Column.MembersToMetaLists(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Collections.Generic.List{UniformDataOperator.Sql.Attributes.Column}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Converting collection of members to lists that contain's splited meta data suitable for queries.
            </summary>
            <param name="members">Source collection of memers.</param>
            <param name="columns">List that contains all detected columns descriptors.</param>
            <param name="variables">List that contains names of local variables in format allowed to internal queries generators.</param>
        </member>
        <member name="T:UniformDataOperator.AttributesHandler">
            <summary>
            Provides API to handle attributes.
            </summary>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.FindFieldsWithAttribute``1(System.Type)">
            <summary>
            Looking for fields with defined target attribute.
            </summary>
            <typeparam name="T">Attribute's type.</typeparam>
            <param name="source">Type the would by used as source of fields.</param>
            <returns>Collection of found attributes.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.FindMembersWithAttribute``1(System.Type)">
            <summary>
            Looking for fields an properties members with defined target attribute.
            </summary>
            <typeparam name="T">Attribute's type.</typeparam>
            <param name="source">Type the would by used as source of fields.</param>
            <returns>Collection of found attributes.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.FindMembersWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Looking for members with defined target attribute.
            </summary>
            <typeparam name="T">Attribute's type.</typeparam>
            <param name="source">Type the would by used as source of fields.</param>
            <returns>Collection of found attributes.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.FindMembersWithoutAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Looking for members without defined target attribute.
            </summary>
            <typeparam name="T">Attribute's type.</typeparam>
            <param name="source">Type the would by used as source of fields.</param>
            <param name="expression">Delegate that would be called to compare member by custom way.</param>
            <returns>Collection of found attributes.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.FindMembersWithoutAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Looking for members without defined target attribute.
            </summary>
            <typeparam name="T">Attribute's type.</typeparam>
            <param name="source">Type the would by used as source of fields.</param>
            <returns>Collection of found attributes.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Check does member has target attribute.
            </summary>
            <typeparam name="AttributeType">Type of target attribute.</typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.TryToGetAttribute``1(System.Reflection.MemberInfo,``0@)">
            <summary>
            Trying to detect attribute defined on member.
            </summary>
            <typeparam name="AttributeType">Type of target attribute.</typeparam>
            <param name="member">Member object.</param>
            <param name="attribute">Outbut that would contains found attribute.</param>
            <returns>Result of the search.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.FindPropertiesWithAttribute``1(System.Type)">
            <summary>
            Looking for properties with defined target attribute.
            </summary>
            <typeparam name="T">Attribute's type.</typeparam>
            <param name="source">Type the would by used as source of fields.</param>
            <returns>Collection of found attributes.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.GetValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Return value of member.
            </summary>
            <param name="holder">Object that contain member info.</param>
            <param name="member">Target memeber's info.</param>
            <returns>Value of member.</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.SetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Setting value to member on specific object.
            </summary>
            <param name="holder">Object that contain member info.</param>
            <param name="member">Target memeber's info.</param>
            <param name="data">Data that would be setted up to member.</param>
            <returns></returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.Converter(System.Type,System.Object)">
            <summary>
            Trying to convers object to other type.
            </summary>
            <param name="targetType">Prefered type of output object.</param>
            <param name="data">Soutce object.</param>
            <returns>Converted object. The same if converting not possible</returns>
        </member>
        <member name="M:UniformDataOperator.AttributesHandler.AddAttribute(System.String,System.Type,System.Type,System.Type[],System.Object[])">
            <summary>
            Add to assembly the new type based on targetType but with existed new attribute.
            </summary>
            <param name="assembly">Assembly that will contains new the type.</param>
            <param name="targetType">Type that will inherited during creating of new type.</param>
            <param name="attrType">Type of attribute that will added to the type.</param>
            <param name="attrConstructorSignature">Signature of attribute constructor.</param>
            <param name="attrConstructorValues">Values that will be shared in atttribute constructor.</param>
        </member>
    </members>
</doc>
